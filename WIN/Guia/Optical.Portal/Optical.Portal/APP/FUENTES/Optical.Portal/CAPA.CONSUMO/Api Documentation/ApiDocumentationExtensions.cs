// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace CAPA.CONSUMO
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for ApiDocumentation.
    /// </summary>
    public static partial class ApiDocumentationExtensions
    {
            /// <summary>
            /// ListaPorNombreUsuario
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apellidoMaterno'>
            /// </param>
            /// <param name='apellidoPaterno'>
            /// </param>
            /// <param name='nombreUsuario'>
            /// </param>
            /// <param name='nombres'>
            /// </param>
            /// <param name='usuarioId'>
            /// </param>
            public static ResultadoApi ListaPorNombreUsuarioUsingPOST(this IApiDocumentation operations, string apellidoMaterno = default(string), string apellidoPaterno = default(string), string nombreUsuario = default(string), string nombres = default(string), int? usuarioId = default(int?))
            {
                return Task.Factory.StartNew(s => ((IApiDocumentation)s).ListaPorNombreUsuarioUsingPOSTAsync(apellidoMaterno, apellidoPaterno, nombreUsuario, nombres, usuarioId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// ListaPorNombreUsuario
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apellidoMaterno'>
            /// </param>
            /// <param name='apellidoPaterno'>
            /// </param>
            /// <param name='nombreUsuario'>
            /// </param>
            /// <param name='nombres'>
            /// </param>
            /// <param name='usuarioId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResultadoApi> ListaPorNombreUsuarioUsingPOSTAsync(this IApiDocumentation operations, string apellidoMaterno = default(string), string apellidoPaterno = default(string), string nombreUsuario = default(string), string nombres = default(string), int? usuarioId = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListaPorNombreUsuarioUsingPOSTWithHttpMessagesAsync(apellidoMaterno, apellidoPaterno, nombreUsuario, nombres, usuarioId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// DefectoPorNombreUsuario
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apellidoMaterno'>
            /// </param>
            /// <param name='apellidoPaterno'>
            /// </param>
            /// <param name='nombreUsuario'>
            /// </param>
            /// <param name='nombres'>
            /// </param>
            /// <param name='usuarioId'>
            /// </param>
            public static ResultadoApi DefectoPorNombreUsuarioUsingPOST(this IApiDocumentation operations, string apellidoMaterno = default(string), string apellidoPaterno = default(string), string nombreUsuario = default(string), string nombres = default(string), int? usuarioId = default(int?))
            {
                return Task.Factory.StartNew(s => ((IApiDocumentation)s).DefectoPorNombreUsuarioUsingPOSTAsync(apellidoMaterno, apellidoPaterno, nombreUsuario, nombres, usuarioId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// DefectoPorNombreUsuario
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apellidoMaterno'>
            /// </param>
            /// <param name='apellidoPaterno'>
            /// </param>
            /// <param name='nombreUsuario'>
            /// </param>
            /// <param name='nombres'>
            /// </param>
            /// <param name='usuarioId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResultadoApi> DefectoPorNombreUsuarioUsingPOSTAsync(this IApiDocumentation operations, string apellidoMaterno = default(string), string apellidoPaterno = default(string), string nombreUsuario = default(string), string nombres = default(string), int? usuarioId = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DefectoPorNombreUsuarioUsingPOSTWithHttpMessagesAsync(apellidoMaterno, apellidoPaterno, nombreUsuario, nombres, usuarioId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// DatosPorNombreUsuario
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apellidoMaterno'>
            /// </param>
            /// <param name='apellidoPaterno'>
            /// </param>
            /// <param name='nombreUsuario'>
            /// </param>
            /// <param name='nombres'>
            /// </param>
            /// <param name='usuarioId'>
            /// </param>
            public static ResultadoApi DatosPorNombreUsuarioUsingPOST(this IApiDocumentation operations, string apellidoMaterno = default(string), string apellidoPaterno = default(string), string nombreUsuario = default(string), string nombres = default(string), int? usuarioId = default(int?))
            {
                return Task.Factory.StartNew(s => ((IApiDocumentation)s).DatosPorNombreUsuarioUsingPOSTAsync(apellidoMaterno, apellidoPaterno, nombreUsuario, nombres, usuarioId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// DatosPorNombreUsuario
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='apellidoMaterno'>
            /// </param>
            /// <param name='apellidoPaterno'>
            /// </param>
            /// <param name='nombreUsuario'>
            /// </param>
            /// <param name='nombres'>
            /// </param>
            /// <param name='usuarioId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResultadoApi> DatosPorNombreUsuarioUsingPOSTAsync(this IApiDocumentation operations, string apellidoMaterno = default(string), string apellidoPaterno = default(string), string nombreUsuario = default(string), string nombres = default(string), int? usuarioId = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DatosPorNombreUsuarioUsingPOSTWithHttpMessagesAsync(apellidoMaterno, apellidoPaterno, nombreUsuario, nombres, usuarioId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
